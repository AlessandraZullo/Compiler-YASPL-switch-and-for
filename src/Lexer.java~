/* The following code was generated by JFlex 1.6.1 */

/* JFlex example: part of Java language lexer specification */
import java_cup.runtime.*;
import java_cup.*;
import supportItems.*;
/**
* This class is a simple example lexer.
*/

class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\55\1\27\1\25\1\0\1\27\1\24\16\55\4\0\1\27\1\5"+
    "\1\56\1\0\1\54\1\0\1\13\1\26\1\20\1\21\1\12\1\15"+
    "\1\23\1\11\1\1\1\14\1\30\11\31\1\17\1\22\1\2\1\4"+
    "\1\3\2\0\32\54\1\0\1\57\2\0\1\54\1\0\1\44\1\40"+
    "\1\50\1\42\1\34\1\33\1\41\1\37\1\32\1\54\1\53\1\35"+
    "\1\52\1\6\1\7\1\47\1\54\1\45\1\36\1\10\1\51\1\43"+
    "\1\46\3\54\1\0\1\16\2\0\41\55\2\0\4\54\4\0\1\54"+
    "\2\0\1\55\7\0\1\54\4\0\1\54\5\0\27\54\1\0\37\54"+
    "\1\0\u01ca\54\4\0\14\54\16\0\5\54\7\0\1\54\1\0\1\54"+
    "\21\0\160\55\5\54\1\0\2\54\2\0\4\54\10\0\1\54\1\0"+
    "\3\54\1\0\1\54\1\0\24\54\1\0\123\54\1\0\213\54\1\0"+
    "\5\55\2\0\236\54\11\0\46\54\2\0\1\54\7\0\47\54\7\0"+
    "\1\54\1\0\55\55\1\0\1\55\1\0\2\55\1\0\2\55\1\0"+
    "\1\55\10\0\33\54\5\0\3\54\15\0\5\55\6\0\1\54\4\0"+
    "\13\55\5\0\53\54\37\55\4\0\2\54\1\55\143\54\1\0\1\54"+
    "\10\55\1\0\6\55\2\54\2\55\1\0\4\55\2\54\12\55\3\54"+
    "\2\0\1\54\17\0\1\55\1\54\1\55\36\54\33\55\2\0\131\54"+
    "\13\55\1\54\16\0\12\55\41\54\11\55\2\54\4\0\1\54\5\0"+
    "\26\54\4\55\1\54\11\55\1\54\3\55\1\54\5\55\22\0\31\54"+
    "\3\55\104\0\1\54\1\0\13\54\67\0\33\55\1\0\4\55\66\54"+
    "\3\55\1\54\22\55\1\54\7\55\12\54\2\55\2\0\12\55\1\0"+
    "\7\54\1\0\7\54\1\0\3\55\1\0\10\54\2\0\2\54\2\0"+
    "\26\54\1\0\7\54\1\0\1\54\3\0\4\54\2\0\1\55\1\54"+
    "\7\55\2\0\2\55\2\0\3\55\1\54\10\0\1\55\4\0\2\54"+
    "\1\0\3\54\2\55\2\0\12\55\4\54\7\0\1\54\5\0\3\55"+
    "\1\0\6\54\4\0\2\54\2\0\26\54\1\0\7\54\1\0\2\54"+
    "\1\0\2\54\1\0\2\54\2\0\1\55\1\0\5\55\4\0\2\55"+
    "\2\0\3\55\3\0\1\55\7\0\4\54\1\0\1\54\7\0\14\55"+
    "\3\54\1\55\13\0\3\55\1\0\11\54\1\0\3\54\1\0\26\54"+
    "\1\0\7\54\1\0\2\54\1\0\5\54\2\0\1\55\1\54\10\55"+
    "\1\0\3\55\1\0\3\55\2\0\1\54\17\0\2\54\2\55\2\0"+
    "\12\55\1\0\1\54\17\0\3\55\1\0\10\54\2\0\2\54\2\0"+
    "\26\54\1\0\7\54\1\0\2\54\1\0\5\54\2\0\1\55\1\54"+
    "\7\55\2\0\2\55\2\0\3\55\10\0\2\55\4\0\2\54\1\0"+
    "\3\54\2\55\2\0\12\55\1\0\1\54\20\0\1\55\1\54\1\0"+
    "\6\54\3\0\3\54\1\0\4\54\3\0\2\54\1\0\1\54\1\0"+
    "\2\54\3\0\2\54\3\0\3\54\3\0\14\54\4\0\5\55\3\0"+
    "\3\55\1\0\4\55\2\0\1\54\6\0\1\55\16\0\12\55\11\0"+
    "\1\54\7\0\3\55\1\0\10\54\1\0\3\54\1\0\27\54\1\0"+
    "\12\54\1\0\5\54\3\0\1\54\7\55\1\0\3\55\1\0\4\55"+
    "\7\0\2\55\1\0\2\54\6\0\2\54\2\55\2\0\12\55\22\0"+
    "\2\55\1\0\10\54\1\0\3\54\1\0\27\54\1\0\12\54\1\0"+
    "\5\54\2\0\1\55\1\54\7\55\1\0\3\55\1\0\4\55\7\0"+
    "\2\55\7\0\1\54\1\0\2\54\2\55\2\0\12\55\1\0\2\54"+
    "\17\0\2\55\1\0\10\54\1\0\3\54\1\0\51\54\2\0\1\54"+
    "\7\55\1\0\3\55\1\0\4\55\1\54\10\0\1\55\10\0\2\54"+
    "\2\55\2\0\12\55\12\0\6\54\2\0\2\55\1\0\22\54\3\0"+
    "\30\54\1\0\11\54\1\0\1\54\2\0\7\54\3\0\1\55\4\0"+
    "\6\55\1\0\1\55\1\0\10\55\22\0\2\55\15\0\60\54\1\55"+
    "\2\54\7\55\4\0\10\54\10\55\1\0\12\55\47\0\2\54\1\0"+
    "\1\54\2\0\2\54\1\0\1\54\2\0\1\54\6\0\4\54\1\0"+
    "\7\54\1\0\3\54\1\0\1\54\1\0\1\54\2\0\2\54\1\0"+
    "\4\54\1\55\2\54\6\55\1\0\2\55\1\54\2\0\5\54\1\0"+
    "\1\54\1\0\6\55\2\0\12\55\2\0\4\54\40\0\1\54\27\0"+
    "\2\55\6\0\12\55\13\0\1\55\1\0\1\55\1\0\1\55\4\0"+
    "\2\55\10\54\1\0\44\54\4\0\24\55\1\0\2\55\5\54\13\55"+
    "\1\0\44\55\11\0\1\55\71\0\53\54\24\55\1\54\12\55\6\0"+
    "\6\54\4\55\4\54\3\55\1\54\3\55\2\54\7\55\3\54\4\55"+
    "\15\54\14\55\1\54\17\55\2\0\46\54\1\0\1\54\5\0\1\54"+
    "\2\0\53\54\1\0\u014d\54\1\0\4\54\2\0\7\54\1\0\1\54"+
    "\1\0\4\54\2\0\51\54\1\0\4\54\2\0\41\54\1\0\4\54"+
    "\2\0\7\54\1\0\1\54\1\0\4\54\2\0\17\54\1\0\71\54"+
    "\1\0\4\54\2\0\103\54\2\0\3\55\40\0\20\54\20\0\125\54"+
    "\14\0\u026c\54\2\0\21\54\1\0\32\54\5\0\113\54\3\0\3\54"+
    "\17\0\15\54\1\0\4\54\3\55\13\0\22\54\3\55\13\0\22\54"+
    "\2\55\14\0\15\54\1\0\3\54\1\0\2\55\14\0\64\54\40\55"+
    "\3\0\1\54\3\0\2\54\1\55\2\0\12\55\41\0\3\55\2\0"+
    "\12\55\6\0\130\54\10\0\51\54\1\55\1\54\5\0\106\54\12\0"+
    "\35\54\3\0\14\55\4\0\14\55\12\0\12\55\36\54\2\0\5\54"+
    "\13\0\54\54\4\0\21\55\7\54\2\55\6\0\12\55\46\0\27\54"+
    "\5\55\4\0\65\54\12\55\1\0\35\55\2\0\13\55\6\0\12\55"+
    "\15\0\1\54\130\0\5\55\57\54\21\55\7\54\4\0\12\55\21\0"+
    "\11\55\14\0\3\55\36\54\15\55\2\54\12\55\54\54\16\55\14\0"+
    "\44\54\24\55\10\0\12\55\3\0\3\54\12\55\44\54\122\0\3\55"+
    "\1\0\25\55\4\54\1\55\4\54\3\55\2\54\11\0\300\54\47\55"+
    "\25\0\4\55\u0116\54\2\0\6\54\2\0\46\54\2\0\6\54\2\0"+
    "\10\54\1\0\1\54\1\0\1\54\1\0\1\54\1\0\37\54\2\0"+
    "\65\54\1\0\7\54\1\0\1\54\3\0\3\54\1\0\7\54\3\0"+
    "\4\54\2\0\6\54\4\0\15\54\5\0\3\54\1\0\7\54\16\0"+
    "\5\55\32\0\5\55\20\0\2\54\23\0\1\54\13\0\5\55\5\0"+
    "\6\55\1\0\1\54\15\0\1\54\20\0\15\54\3\0\33\54\25\0"+
    "\15\55\4\0\1\55\3\0\14\55\21\0\1\54\4\0\1\54\2\0"+
    "\12\54\1\0\1\54\3\0\5\54\6\0\1\54\1\0\1\54\1\0"+
    "\1\54\1\0\4\54\1\0\13\54\2\0\4\54\5\0\5\54\4\0"+
    "\1\54\21\0\51\54\u0a77\0\57\54\1\0\57\54\1\0\205\54\6\0"+
    "\4\54\3\55\2\54\14\0\46\54\1\0\1\54\5\0\1\54\2\0"+
    "\70\54\7\0\1\54\17\0\1\55\27\54\11\0\7\54\1\0\7\54"+
    "\1\0\7\54\1\0\7\54\1\0\7\54\1\0\7\54\1\0\7\54"+
    "\1\0\7\54\1\0\40\55\57\0\1\54\u01d5\0\3\54\31\0\11\54"+
    "\6\55\1\0\5\54\2\0\5\54\4\0\126\54\2\0\2\55\2\0"+
    "\3\54\1\0\132\54\1\0\4\54\5\0\51\54\3\0\136\54\21\0"+
    "\33\54\65\0\20\54\u0200\0\u19b6\54\112\0\u51cd\54\63\0\u048d\54\103\0"+
    "\56\54\2\0\u010d\54\3\0\20\54\12\55\2\54\24\0\57\54\1\55"+
    "\4\0\12\55\1\0\31\54\7\0\1\55\120\54\2\55\45\0\11\54"+
    "\2\0\147\54\2\0\4\54\1\0\4\54\14\0\13\54\115\0\12\54"+
    "\1\55\3\54\1\55\4\54\1\55\27\54\5\55\20\0\1\54\7\0"+
    "\64\54\14\0\2\55\62\54\21\55\13\0\12\55\6\0\22\55\6\54"+
    "\3\0\1\54\4\0\12\55\34\54\10\55\2\0\27\54\15\55\14\0"+
    "\35\54\3\0\4\55\57\54\16\55\16\0\1\54\12\55\46\0\51\54"+
    "\16\55\11\0\3\54\1\55\10\54\2\55\2\0\12\55\6\0\27\54"+
    "\3\0\1\54\1\55\4\0\60\54\1\55\1\54\3\55\2\54\2\55"+
    "\5\54\2\55\1\54\1\55\1\54\30\0\3\54\2\0\13\54\5\55"+
    "\2\0\3\54\2\55\12\0\6\54\2\0\6\54\2\0\6\54\11\0"+
    "\7\54\1\0\7\54\221\0\43\54\10\55\1\0\2\55\2\0\12\55"+
    "\6\0\u2ba4\54\14\0\27\54\4\0\61\54\u2104\0\u016e\54\2\0\152\54"+
    "\46\0\7\54\14\0\5\54\5\0\1\54\1\55\12\54\1\0\15\54"+
    "\1\0\5\54\1\0\1\54\1\0\2\54\1\0\2\54\1\0\154\54"+
    "\41\0\u016b\54\22\0\100\54\2\0\66\54\50\0\15\54\3\0\20\55"+
    "\20\0\7\55\14\0\2\54\30\0\3\54\31\0\1\54\6\0\5\54"+
    "\1\0\207\54\2\0\1\55\4\0\1\54\13\0\12\55\7\0\32\54"+
    "\4\0\1\54\1\0\32\54\13\0\131\54\3\0\6\54\2\0\6\54"+
    "\2\0\6\54\2\0\3\54\3\0\2\54\3\0\2\54\22\0\3\55"+
    "\4\0\14\54\1\0\32\54\1\0\23\54\1\0\2\54\1\0\17\54"+
    "\2\0\16\54\42\0\173\54\105\0\65\54\210\0\1\55\202\0\35\54"+
    "\3\0\61\54\57\0\37\54\21\0\33\54\65\0\36\54\2\0\44\54"+
    "\4\0\10\54\1\0\5\54\52\0\236\54\2\0\12\55\u0356\0\6\54"+
    "\2\0\1\54\1\0\54\54\1\0\2\54\3\0\1\54\2\0\27\54"+
    "\252\0\26\54\12\0\32\54\106\0\70\54\6\0\2\54\100\0\1\54"+
    "\3\55\1\0\2\55\5\0\4\55\4\54\1\0\3\54\1\0\33\54"+
    "\4\0\3\55\4\0\1\55\40\0\35\54\203\0\66\54\12\0\26\54"+
    "\12\0\23\54\215\0\111\54\u03b7\0\3\55\65\54\17\55\37\0\12\55"+
    "\20\0\3\55\55\54\13\55\2\0\1\55\22\0\31\54\7\0\12\55"+
    "\6\0\3\55\44\54\16\55\1\0\12\55\100\0\3\55\60\54\16\55"+
    "\4\54\13\0\12\55\u04a6\0\53\54\15\55\10\0\12\55\u0936\0\u036f\54"+
    "\221\0\143\54\u0b9d\0\u042f\54\u33d1\0\u0239\54\u04c7\0\105\54\13\0\1\54"+
    "\56\55\20\0\4\55\15\54\u4060\0\2\54\u2163\0\5\55\3\0\26\55"+
    "\2\0\7\55\36\0\4\55\224\0\3\55\u01bb\0\125\54\1\0\107\54"+
    "\1\0\2\54\2\0\1\54\2\0\2\54\2\0\4\54\1\0\14\54"+
    "\1\0\1\54\1\0\7\54\1\0\101\54\1\0\4\54\2\0\10\54"+
    "\1\0\7\54\1\0\34\54\1\0\4\54\1\0\5\54\1\0\1\54"+
    "\3\0\7\54\1\0\u0154\54\2\0\31\54\1\0\31\54\1\0\37\54"+
    "\1\0\31\54\1\0\37\54\1\0\31\54\1\0\37\54\1\0\31\54"+
    "\1\0\37\54\1\0\31\54\1\0\10\54\2\0\62\55\u1600\0\4\54"+
    "\1\0\33\54\1\0\2\54\1\0\1\54\2\0\1\54\1\0\12\54"+
    "\1\0\4\54\1\0\1\54\1\0\1\54\6\0\1\54\4\0\1\54"+
    "\1\0\1\54\1\0\1\54\1\0\3\54\1\0\2\54\1\0\1\54"+
    "\2\0\1\54\1\0\1\54\1\0\1\54\1\0\1\54\1\0\1\54"+
    "\1\0\2\54\1\0\1\54\2\0\4\54\1\0\7\54\1\0\4\54"+
    "\1\0\4\54\1\0\1\54\1\0\12\54\1\0\21\54\5\0\3\54"+
    "\1\0\5\54\1\0\21\54\u1144\0\ua6d7\54\51\0\u1035\54\13\0\336\54"+
    "\u3fe2\0\u021e\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\55\36\0\140\55\200\0\360\55\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\4\1\2\3\5\1\6"+
    "\1\7\1\2\1\7\1\10\1\2\1\11\1\12\1\13"+
    "\1\14\1\15\2\1\1\2\2\16\12\5\1\17\1\20"+
    "\1\21\1\22\1\1\2\2\1\4\1\23\3\5\1\24"+
    "\1\25\1\26\1\27\1\0\1\5\1\30\10\5\1\31"+
    "\5\5\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\2\5\1\0\2\26\1\41\1\5\1\42\1\5\1\43"+
    "\6\5\1\44\3\5\1\45\1\46\1\0\2\5\1\47"+
    "\10\5\1\50\1\5\1\51\2\5\1\52\1\5\1\53"+
    "\3\5\1\54\4\5\1\55\1\56\1\57\1\60\2\5"+
    "\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\220\0\300\0\360\0\360"+
    "\0\u0120\0\u0150\0\u0180\0\u01b0\0\220\0\u01e0\0\u0210\0\220"+
    "\0\u0240\0\u0270\0\220\0\220\0\220\0\220\0\u02a0\0\220"+
    "\0\u02d0\0\220\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\220\0\u0510\0\220"+
    "\0\u0540\0\u0570\0\u05a0\0\u05d0\0\220\0\220\0\u0600\0\u0630"+
    "\0\u0660\0\220\0\u0690\0\u06c0\0\220\0\u06f0\0\u0720\0\u0150"+
    "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0"+
    "\0\u0150\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\220\0\220"+
    "\0\220\0\220\0\220\0\220\0\u0150\0\u09c0\0\u09f0\0\u0a20"+
    "\0\u0a50\0\220\0\220\0\u0a80\0\u0150\0\u0ab0\0\u0150\0\u0ae0"+
    "\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0150\0\u0c00\0\u0c30"+
    "\0\u0c60\0\u0150\0\u0150\0\u0c90\0\u0cc0\0\u0cf0\0\u0150\0\u0d20"+
    "\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0150"+
    "\0\u0ea0\0\u0150\0\u0ed0\0\u0f00\0\u0150\0\u0f30\0\u0150\0\u0f60"+
    "\0\u0f90\0\u0fc0\0\u0150\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u0150"+
    "\0\u0150\0\u0150\0\u0150\0\u10b0\0\u10e0\0\u0150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\30\1\32"+
    "\1\33\1\34\1\35\1\36\1\12\1\37\1\12\1\40"+
    "\1\12\1\41\1\42\2\12\1\43\1\44\1\45\4\12"+
    "\1\4\1\46\1\4\24\47\2\4\30\47\1\50\1\51"+
    "\12\52\1\53\1\52\1\54\43\52\64\0\1\55\4\0"+
    "\1\56\52\0\1\55\61\0\1\12\1\57\1\12\17\0"+
    "\26\12\10\0\3\12\17\0\26\12\10\0\3\12\17\0"+
    "\7\12\1\60\5\12\1\61\10\12\5\0\1\62\67\0"+
    "\1\15\56\0\1\63\1\0\1\64\61\0\1\20\45\0"+
    "\1\65\100\0\1\30\32\0\24\66\3\0\31\66\30\0"+
    "\2\33\34\0\1\67\2\12\17\0\3\12\1\70\22\12"+
    "\10\0\1\12\1\71\1\12\17\0\14\12\1\72\11\12"+
    "\10\0\1\73\2\12\17\0\5\12\1\74\20\12\10\0"+
    "\3\12\17\0\16\12\1\75\7\12\10\0\1\12\1\76"+
    "\1\12\17\0\4\12\1\77\10\12\1\100\10\12\10\0"+
    "\1\12\1\101\1\12\17\0\4\12\1\102\21\12\10\0"+
    "\3\12\17\0\14\12\1\103\11\12\10\0\3\12\17\0"+
    "\7\12\1\104\16\12\10\0\3\12\17\0\15\12\1\105"+
    "\10\12\10\0\3\12\17\0\14\12\1\106\11\12\2\0"+
    "\24\47\2\0\30\47\10\0\1\107\1\0\1\110\34\0"+
    "\1\111\10\0\1\112\1\0\12\52\1\0\1\52\1\0"+
    "\43\52\14\0\1\113\55\0\1\114\53\0\2\12\1\115"+
    "\17\0\26\12\10\0\3\12\17\0\4\12\1\116\21\12"+
    "\10\0\3\12\17\0\21\12\1\117\4\12\14\0\1\120"+
    "\45\0\24\64\1\121\1\122\1\0\31\64\26\0\1\123"+
    "\37\0\2\12\1\124\17\0\26\12\10\0\3\12\17\0"+
    "\15\12\1\125\10\12\10\0\3\12\17\0\5\12\1\126"+
    "\20\12\10\0\3\12\17\0\12\12\1\127\13\12\10\0"+
    "\3\12\17\0\6\12\1\130\17\12\10\0\3\12\17\0"+
    "\2\12\1\131\23\12\10\0\1\12\1\132\1\12\17\0"+
    "\26\12\10\0\3\12\17\0\11\12\1\133\14\12\10\0"+
    "\3\12\17\0\4\12\1\134\21\12\10\0\3\12\17\0"+
    "\3\12\1\135\22\12\10\0\3\12\17\0\15\12\1\136"+
    "\10\12\10\0\3\12\17\0\2\12\1\137\23\12\10\0"+
    "\1\12\1\140\1\12\17\0\26\12\10\0\3\12\17\0"+
    "\6\12\1\141\17\12\10\0\1\142\2\12\17\0\26\12"+
    "\10\0\3\12\17\0\4\12\1\143\21\12\2\0\12\120"+
    "\1\144\45\120\25\0\1\122\40\0\3\12\17\0\4\12"+
    "\1\145\21\12\10\0\3\12\17\0\6\12\1\146\17\12"+
    "\10\0\3\12\17\0\4\12\1\147\21\12\10\0\2\12"+
    "\1\150\17\0\26\12\10\0\3\12\17\0\5\12\1\151"+
    "\20\12\10\0\3\12\17\0\2\12\1\152\23\12\10\0"+
    "\3\12\17\0\14\12\1\153\11\12\10\0\3\12\17\0"+
    "\14\12\1\154\11\12\10\0\3\12\17\0\5\12\1\155"+
    "\20\12\10\0\3\12\17\0\11\12\1\156\6\12\1\157"+
    "\5\12\10\0\3\12\17\0\4\12\1\160\21\12\2\0"+
    "\12\120\1\144\1\120\1\122\43\120\6\0\3\12\17\0"+
    "\11\12\1\161\14\12\10\0\3\12\17\0\4\12\1\162"+
    "\21\12\10\0\3\12\17\0\20\12\1\163\5\12\10\0"+
    "\3\12\17\0\4\12\1\164\21\12\10\0\1\165\2\12"+
    "\17\0\26\12\10\0\3\12\17\0\23\12\1\160\2\12"+
    "\10\0\3\12\17\0\21\12\1\166\4\12\10\0\3\12"+
    "\17\0\4\12\1\167\21\12\10\0\3\12\17\0\15\12"+
    "\1\170\10\12\10\0\3\12\17\0\4\12\1\171\21\12"+
    "\10\0\3\12\17\0\4\12\1\172\21\12\10\0\3\12"+
    "\17\0\7\12\1\173\16\12\10\0\3\12\17\0\14\12"+
    "\1\174\11\12\10\0\3\12\17\0\5\12\1\175\20\12"+
    "\10\0\3\12\17\0\14\12\1\176\11\12\10\0\3\12"+
    "\17\0\12\12\1\177\13\12\10\0\3\12\17\0\15\12"+
    "\1\200\10\12\10\0\1\201\2\12\17\0\26\12\10\0"+
    "\2\12\1\202\17\0\26\12\10\0\3\12\17\0\22\12"+
    "\1\203\3\12\10\0\3\12\17\0\21\12\1\204\4\12"+
    "\10\0\3\12\17\0\15\12\1\205\10\12\10\0\3\12"+
    "\17\0\4\12\1\206\21\12\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4368];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\2\11\7\1\1\11\2\1\1\11\2\1"+
    "\4\11\1\1\1\11\1\1\1\11\13\1\1\11\1\1"+
    "\1\11\4\1\2\11\3\1\1\11\2\1\1\11\1\0"+
    "\20\1\6\11\3\1\1\0\1\1\2\11\20\1\1\0"+
    "\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[134];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
private TableOfSymbols table = new TableOfSymbols();

int comments_level;
  StringBuffer string = new StringBuffer();


  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }

  private Symbol symbol(Object value, int type) {

    java.util.Map.Entry entry = table.addLexem(value.toString());
    table.addAttribute(value.toString(), new Attributo("class", type + ""));

    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2844) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              throw new Error("Fine file raggiunto");
            }
            case 135: break;
            case COMMENT: {
              throw new Error("Fine file raggiunto");
            }
            case 136: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            }
          case 50: break;
          case 2: 
            { throw new Error("Illegal character <"+ yytext()+">");
            }
          case 51: break;
          case 3: 
            { return symbol("END_PROGRAM",sym.END_PROGRAM);
            }
          case 52: break;
          case 4: 
            { return symbol(yytext(), sym.RELOP);
            }
          case 53: break;
          case 5: 
            { return symbol(yytext(), sym.IDENTIFIER);
            }
          case 54: break;
          case 6: 
            { return symbol("MINUS", sym.MINUS);
            }
          case 55: break;
          case 7: 
            { return symbol(yytext(), sym.MULT_OPERATOR);
            }
          case 56: break;
          case 8: 
            { return symbol(yytext(), sym.ADD_OPERATOR);
            }
          case 57: break;
          case 9: 
            { return symbol(sym.COLON);
            }
          case 58: break;
          case 10: 
            { return symbol("LPAREN",sym.LPAR);
            }
          case 59: break;
          case 11: 
            { return symbol("RPAREN",sym.RPAR);
            }
          case 60: break;
          case 12: 
            { return symbol("INSTRUCTION_SEPARATOR",sym.INSTRUCTION_SEPARATOR);
            }
          case 61: break;
          case 13: 
            { return symbol("SEPARATOR",sym.SEPARATOR);
            }
          case 62: break;
          case 14: 
            { return symbol(new Integer(yytext()).toString(), sym.INTEGER_CONSTANT);
            }
          case 63: break;
          case 15: 
            { string.setLength(0); yybegin(STRING);
            }
          case 64: break;
          case 16: 
            { string.append( yytext() );
            }
          case 65: break;
          case 17: 
            { yybegin(YYINITIAL); return symbol("\""+ string.toString() + "\"", sym.STRING_CONSTANT);
            }
          case 66: break;
          case 18: 
            { string.append('\\');
            }
          case 67: break;
          case 19: 
            { return symbol("READ",sym.READ);
            }
          case 68: break;
          case 20: 
            { return symbol("WRITE",sym.WRITE);
            }
          case 69: break;
          case 21: 
            { comments_level ++; yybegin(COMMENT);
            }
          case 70: break;
          case 22: 
            { /*Ignore if is a EndOfLineComment or a DocumentationComment*/
            }
          case 71: break;
          case 23: 
            { return symbol(sym.ASSIGN);
            }
          case 72: break;
          case 24: 
            { return symbol(sym.IF);
            }
          case 73: break;
          case 25: 
            { return symbol(sym.DO);
            }
          case 74: break;
          case 26: 
            { string.append('\n');
            }
          case 75: break;
          case 27: 
            { string.append('\t');
            }
          case 76: break;
          case 28: 
            { string.append('\r');
            }
          case 77: break;
          case 29: 
            { string.append('\"');
            }
          case 78: break;
          case 30: 
            { if( -- comments_level == 0) yybegin(YYINITIAL);
            }
          case 79: break;
          case 31: 
            { comments_level ++;
            }
          case 80: break;
          case 32: 
            { return symbol(sym.NOT);
            }
          case 81: break;
          case 33: 
            { return symbol(yytext(), sym.CHARACTER_CONSTANT);
            }
          case 82: break;
          case 34: 
            { return symbol(sym.FOR);
            }
          case 83: break;
          case 35: 
            { return symbol(sym.END);
            }
          case 84: break;
          case 36: 
            { return symbol(sym.VAR);
            }
          case 85: break;
          case 37: 
            { return symbol(sym.THEN);
            }
          case 86: break;
          case 38: 
            { return symbol(sym.TRUE);
            }
          case 87: break;
          case 39: 
            { return symbol(sym.ELSE);
            }
          case 88: break;
          case 40: 
            { return symbol(sym.CASE);
            }
          case 89: break;
          case 41: 
            { return symbol(sym.FALSE);
            }
          case 90: break;
          case 42: 
            { return symbol(sym.BEGIN);
            }
          case 91: break;
          case 43: 
            { return symbol(sym.WHILE);
            }
          case 92: break;
          case 44: 
            { return symbol(sym.SWITCH);
            }
          case 93: break;
          case 45: 
            { return symbol(sym.INTEGER);
            }
          case 94: break;
          case 46: 
            { return symbol(sym.BOOLEAN);
            }
          case 95: break;
          case 47: 
            { return symbol(sym.DEFAULT);
            }
          case 96: break;
          case 48: 
            { return symbol(sym.PROGRAM);
            }
          case 97: break;
          case 49: 
            { return symbol(sym.PROCEDURE);
            }
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
