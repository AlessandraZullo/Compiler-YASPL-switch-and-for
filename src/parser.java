
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import com.scalified.tree.*;
import com.scalified.tree.multinode.*;
import java.util.List;
import java.util.ArrayList;
import Visitor.*;
import supportItems.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\007\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\004\006\000\002\004\002" +
    "\000\002\054\005\000\002\054\002\000\002\025\005\000" +
    "\002\053\005\000\002\053\002\000\002\047\003\000\002" +
    "\047\003\000\002\051\005\000\002\051\002\000\002\006" +
    "\006\000\002\007\004\000\002\005\003\000\002\010\006" +
    "\000\002\050\005\000\002\050\002\000\002\011\003\000" +
    "\002\011\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\014\005\000\002\015" +
    "\007\000\002\055\005\000\002\055\002\000\002\041\003" +
    "\000\002\016\003\000\002\045\003\000\002\017\007\000" +
    "\002\052\005\000\002\052\002\000\002\021\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\026\007\000\002\027\011" +
    "\000\002\030\003\000\002\030\002\000\002\031\003\000" +
    "\002\031\002\000\002\032\003\000\002\032\002\000\002" +
    "\022\006\000\002\022\010\000\002\023\007\000\002\036" +
    "\011\000\002\033\005\000\002\033\005\000\002\033\003" +
    "\000\002\033\005\000\002\033\004\000\002\033\004\000" +
    "\002\033\005\000\002\056\004\000\002\056\002\000\002" +
    "\034\007\000\002\034\010\000\002\037\004\000\002\037" +
    "\002\000\002\035\006\000\002\035\002\000\002\020\003" +
    "\000\002\020\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\003\000\002\024\003\000\002\024\005\000\002" +
    "\024\004\000\002\024\004\000\002\046\003\000\002\046" +
    "\003\000\002\043\003\000\002\044\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\042\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\006\003\004\010\006\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\255\001\002\000\004\011\007" +
    "\001\002\000\004\012\010\001\002\000\010\014\011\015" +
    "\ufffc\020\ufffc\001\002\000\004\011\237\001\002\000\006" +
    "\015\015\020\ufff3\001\002\000\004\013\014\001\002\000" +
    "\004\002\001\001\002\000\004\011\232\001\002\000\004" +
    "\012\230\001\002\000\004\020\020\001\002\000\022\011" +
    "\032\020\020\021\037\022\023\023\035\025\027\044\046" +
    "\047\033\001\002\000\006\012\ufff0\013\ufff0\001\002\000" +
    "\004\013\ufffe\001\002\000\004\004\220\001\002\000\020" +
    "\005\uffeb\012\uffeb\027\uffeb\040\uffeb\046\uffeb\050\uffeb\051" +
    "\uffeb\001\002\000\006\012\213\027\uffed\001\002\000\020" +
    "\005\uffda\012\uffda\027\uffda\040\uffda\046\uffda\050\uffda\051" +
    "\uffda\001\002\000\024\004\070\006\063\011\057\034\077" +
    "\035\067\036\073\041\071\042\064\043\062\001\002\000" +
    "\042\005\uffb0\006\uffb0\012\uffb0\020\uffb0\024\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\037\uffb0\040" +
    "\uffb0\046\uffb0\050\uffb0\051\uffb0\001\002\000\020\005\uffd9" +
    "\012\uffd9\027\uffd9\040\uffd9\046\uffd9\050\uffd9\051\uffd9\001" +
    "\002\000\022\005\uffe0\012\uffe0\027\uffe0\030\uffaf\040\uffe0" +
    "\046\uffe0\050\uffe0\051\uffe0\001\002\000\024\004\141\006" +
    "\137\011\057\034\144\035\067\036\073\041\071\042\064" +
    "\043\062\001\002\000\020\005\uffea\012\uffea\027\uffea\040" +
    "\uffea\046\uffea\050\uffea\051\uffea\001\002\000\024\004\070" +
    "\006\063\011\057\034\077\035\067\036\073\041\071\042" +
    "\064\043\062\001\002\000\020\005\uffdb\012\uffdb\027\uffdb" +
    "\040\uffdb\046\uffdb\050\uffdb\051\uffdb\001\002\000\004\004" +
    "\122\001\002\000\020\005\uffd8\012\uffd8\027\uffd8\040\uffd8" +
    "\046\uffd8\050\uffd8\051\uffd8\001\002\000\020\005\uffd7\012" +
    "\uffd7\027\uffd7\040\uffd7\046\uffd7\050\uffd7\051\uffd7\001\002" +
    "\000\020\005\uffe8\012\uffe8\027\uffe8\040\uffe8\046\uffe8\050" +
    "\uffe8\051\uffe8\001\002\000\020\005\uffe7\012\uffe7\027\uffe7" +
    "\040\uffe7\046\uffe7\050\uffe7\051\uffe7\001\002\000\020\005" +
    "\uffe9\012\uffe9\027\uffe9\040\uffe9\046\uffe9\050\uffe9\051\uffe9" +
    "\001\002\000\004\030\120\001\002\000\004\004\051\001" +
    "\002\000\020\005\uffe1\012\uffe1\027\uffe1\040\uffe1\046\uffe1" +
    "\050\uffe1\051\uffe1\001\002\000\020\005\uffec\012\uffec\027" +
    "\uffec\040\uffec\046\uffec\050\uffec\051\uffec\001\002\000\006" +
    "\011\057\012\uffd3\001\002\000\004\026\053\001\002\000" +
    "\022\011\032\020\020\021\037\022\023\023\035\025\027" +
    "\044\046\047\033\001\002\000\004\012\055\001\002\000" +
    "\020\005\uffd6\012\uffd6\027\uffd6\040\uffd6\046\uffd6\050\uffd6" +
    "\051\uffd6\001\002\000\004\012\uffd4\001\002\000\042\005" +
    "\uffaf\006\uffaf\012\uffaf\020\uffaf\024\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\033\uffaf\037\uffaf\040\uffaf\046" +
    "\uffaf\050\uffaf\051\uffaf\001\002\000\004\012\061\001\002" +
    "\000\026\004\070\006\063\011\057\012\uffd1\034\077\035" +
    "\067\036\073\041\071\042\064\043\062\001\002\000\044" +
    "\004\uffad\005\uffad\006\uffad\012\uffad\020\uffad\024\uffad\026" +
    "\uffad\027\uffad\031\uffad\032\uffad\033\uffad\037\uffad\040\uffad" +
    "\045\uffad\046\uffad\050\uffad\051\uffad\001\002\000\024\004" +
    "\070\006\063\011\057\034\077\035\067\036\073\041\071" +
    "\042\064\043\062\001\002\000\044\004\uffac\005\uffac\006" +
    "\uffac\012\uffac\020\uffac\024\uffac\026\uffac\027\uffac\031\uffac" +
    "\032\uffac\033\uffac\037\uffac\040\uffac\045\uffac\046\uffac\050" +
    "\uffac\051\uffac\001\002\000\004\012\113\001\002\000\040" +
    "\005\uffb7\006\uffb7\012\uffb7\020\uffb7\024\uffb7\026\uffb7\027" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\037\uffb7\040\uffb7\046\uffb7" +
    "\050\uffb7\051\uffb7\001\002\000\044\004\uffaa\005\uffaa\006" +
    "\uffaa\012\uffaa\020\uffaa\024\uffaa\026\uffaa\027\uffaa\031\uffaa" +
    "\032\uffaa\033\uffaa\037\uffaa\040\uffaa\045\uffaa\046\uffaa\050" +
    "\uffaa\051\uffaa\001\002\000\024\004\070\006\063\011\057" +
    "\034\077\035\067\036\073\041\071\042\064\043\062\001" +
    "\002\000\044\004\uffae\005\uffae\006\uffae\012\uffae\020\uffae" +
    "\024\uffae\026\uffae\027\uffae\031\uffae\032\uffae\033\uffae\037" +
    "\uffae\040\uffae\045\uffae\046\uffae\050\uffae\051\uffae\001\002" +
    "\000\044\004\uffab\005\uffab\006\uffab\012\uffab\020\uffab\024" +
    "\uffab\026\uffab\027\uffab\031\uffab\032\uffab\033\uffab\037\uffab" +
    "\040\uffab\045\uffab\046\uffab\050\uffab\051\uffab\001\002\000" +
    "\044\004\uffa9\005\uffa9\006\uffa9\012\uffa9\020\uffa9\024\uffa9" +
    "\026\uffa9\027\uffa9\031\uffa9\032\uffa9\033\uffa9\037\uffa9\040" +
    "\uffa9\045\uffa9\046\uffa9\050\uffa9\051\uffa9\001\002\000\004" +
    "\012\uffd2\001\002\000\040\005\uffbb\006\103\012\uffbb\020" +
    "\uffbb\024\uffbb\026\uffbb\027\uffbb\031\102\032\105\033\101" +
    "\037\uffbb\040\uffbb\046\uffbb\050\uffbb\051\uffbb\001\002\000" +
    "\040\005\uffb6\006\uffb6\012\uffb6\020\uffb6\024\uffb6\026\uffb6" +
    "\027\uffb6\031\uffb6\032\uffb6\033\uffb6\037\uffb6\040\uffb6\046" +
    "\uffb6\050\uffb6\051\uffb6\001\002\000\024\004\070\006\063" +
    "\011\057\034\077\035\067\036\073\041\071\042\064\043" +
    "\062\001\002\000\040\005\uffb4\006\uffb4\012\uffb4\020\uffb4" +
    "\024\uffb4\026\uffb4\027\uffb4\031\uffb4\032\uffb4\033\uffb4\037" +
    "\uffb4\040\uffb4\046\uffb4\050\uffb4\051\uffb4\001\002\000\024" +
    "\004\070\006\063\011\057\034\077\035\067\036\073\041" +
    "\071\042\064\043\062\001\002\000\024\004\070\006\063" +
    "\011\057\034\077\035\067\036\073\041\071\042\064\043" +
    "\062\001\002\000\024\004\uffb1\006\uffb1\011\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\041\uffb1\042\uffb1\043\uffb1\001\002\000" +
    "\024\004\070\006\063\011\057\034\077\035\067\036\073" +
    "\041\071\042\064\043\062\001\002\000\024\004\uffb2\006" +
    "\uffb2\011\uffb2\034\uffb2\035\uffb2\036\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\001\002\000\040\005\uffb9\006\103\012\uffb9\020" +
    "\uffb9\024\uffb9\026\uffb9\027\uffb9\031\uffb9\032\105\033\101" +
    "\037\uffb9\040\uffb9\046\uffb9\050\uffb9\051\uffb9\001\002\000" +
    "\040\005\uffba\006\uffba\012\uffba\020\uffba\024\uffba\026\uffba" +
    "\027\uffba\031\uffba\032\uffba\033\uffba\037\uffba\040\uffba\046" +
    "\uffba\050\uffba\051\uffba\001\002\000\040\005\uffb8\006\uffb8" +
    "\012\uffb8\020\uffb8\024\uffb8\026\uffb8\027\uffb8\031\uffb8\032" +
    "\uffb8\033\uffb8\037\uffb8\040\uffb8\046\uffb8\050\uffb8\051\uffb8" +
    "\001\002\000\004\005\112\001\002\000\040\005\uffb5\006" +
    "\uffb5\012\uffb5\020\uffb5\024\uffb5\026\uffb5\027\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\037\uffb5\040\uffb5\046\uffb5\050\uffb5\051" +
    "\uffb5\001\002\000\012\005\uffcf\011\032\021\037\022\023" +
    "\001\002\000\004\005\uffd0\001\002\000\004\005\116\001" +
    "\002\000\004\026\uffd5\001\002\000\040\005\uffb3\006\uffb3" +
    "\012\uffb3\020\uffb3\024\uffb3\026\uffb3\027\uffb3\031\uffb3\032" +
    "\uffb3\033\uffb3\037\uffb3\040\uffb3\046\uffb3\050\uffb3\051\uffb3" +
    "\001\002\000\024\004\070\006\063\011\057\034\077\035" +
    "\067\036\073\041\071\042\064\043\062\001\002\000\020" +
    "\005\uffe6\012\uffe6\027\uffe6\040\uffe6\046\uffe6\050\uffe6\051" +
    "\uffe6\001\002\000\024\004\070\006\063\011\057\034\077" +
    "\035\067\036\073\041\071\042\064\043\062\001\002\000" +
    "\006\005\uffdc\037\uffdc\001\002\000\006\005\uffdd\037\126" +
    "\001\002\000\004\005\131\001\002\000\024\004\070\006" +
    "\063\011\057\034\077\035\067\036\073\041\071\042\064" +
    "\043\062\001\002\000\006\005\uffdd\037\126\001\002\000" +
    "\004\005\uffde\001\002\000\020\005\uffdf\012\uffdf\027\uffdf" +
    "\040\uffdf\046\uffdf\050\uffdf\051\uffdf\001\002\000\004\024" +
    "\133\001\002\000\022\011\032\020\020\021\037\022\023" +
    "\023\035\025\027\044\046\047\033\001\002\000\020\005" +
    "\uffce\012\uffce\027\uffce\040\135\046\uffce\050\uffce\051\uffce" +
    "\001\002\000\022\011\032\020\020\021\037\022\023\023" +
    "\035\025\027\044\046\047\033\001\002\000\020\005\uffcd" +
    "\012\uffcd\027\uffcd\040\uffcd\046\uffcd\050\uffcd\051\uffcd\001" +
    "\002\000\024\004\070\006\063\011\057\034\077\035\067" +
    "\036\073\041\071\042\064\043\062\001\002\000\014\006" +
    "\uffb7\020\uffc8\031\uffb7\032\uffb7\033\uffb7\001\002\000\024" +
    "\004\070\006\063\011\057\034\077\035\067\036\073\041" +
    "\071\042\064\043\062\001\002\000\004\020\154\001\002" +
    "\000\012\006\103\031\147\032\105\033\146\001\002\000" +
    "\024\004\070\006\063\011\057\034\077\035\067\036\073" +
    "\041\071\042\064\043\062\001\002\000\014\006\uffb4\020" +
    "\uffc6\031\uffb4\032\uffb4\033\uffb4\001\002\000\024\004\070" +
    "\006\063\011\057\034\077\035\067\036\073\041\071\042" +
    "\064\043\062\001\002\000\024\004\070\006\063\011\057" +
    "\034\077\035\067\036\073\041\071\042\064\043\062\001" +
    "\002\000\024\004\070\006\063\011\057\034\077\035\067" +
    "\036\073\041\071\042\064\043\062\001\002\000\014\006" +
    "\103\020\uffca\031\uffb9\032\105\033\101\001\002\000\012" +
    "\006\103\020\uffc4\032\105\033\101\001\002\000\014\006" +
    "\uffb8\020\uffc9\031\uffb8\032\uffb8\033\uffb8\001\002\000\012" +
    "\005\160\027\uffc2\046\157\050\uffc2\001\002\000\012\005" +
    "\160\027\uffc2\046\157\050\uffc2\001\002\000\006\027\uffbc" +
    "\050\174\001\002\000\014\035\067\036\073\041\071\042" +
    "\064\043\062\001\002\000\014\035\067\036\073\041\071" +
    "\042\064\043\062\001\002\000\004\004\162\001\002\000" +
    "\004\045\163\001\002\000\022\011\032\020\020\021\037" +
    "\022\023\023\035\025\027\044\046\047\033\001\002\000" +
    "\014\005\uffbe\027\uffbe\046\uffbe\050\uffbe\051\165\001\002" +
    "\000\004\012\167\001\002\000\012\005\uffc0\027\uffc0\046" +
    "\uffc0\050\uffc0\001\002\000\012\005\uffbf\027\uffbf\046\uffbf" +
    "\050\uffbf\001\002\000\004\045\171\001\002\000\022\011" +
    "\032\020\020\021\037\022\023\023\035\025\027\044\046" +
    "\047\033\001\002\000\014\005\uffbe\027\uffbe\046\uffbe\050" +
    "\uffbe\051\165\001\002\000\012\005\uffc1\027\uffc1\046\uffc1" +
    "\050\uffc1\001\002\000\004\045\200\001\002\000\004\027" +
    "\176\001\002\000\004\012\177\001\002\000\020\005\uffcb" +
    "\012\uffcb\027\uffcb\040\uffcb\046\uffcb\050\uffcb\051\uffcb\001" +
    "\002\000\022\011\032\020\020\021\037\022\023\023\035" +
    "\025\027\044\046\047\033\001\002\000\006\027\uffbe\051" +
    "\165\001\002\000\004\027\uffbd\001\002\000\006\027\uffc3" +
    "\050\uffc3\001\002\000\004\005\205\001\002\000\014\006" +
    "\uffb5\020\uffc7\031\uffb5\032\uffb5\033\uffb5\001\002\000\014" +
    "\006\uffb3\020\uffc5\031\uffb3\032\uffb3\033\uffb3\001\002\000" +
    "\004\026\210\001\002\000\022\011\032\020\020\021\037" +
    "\022\023\023\035\025\027\044\046\047\033\001\002\000" +
    "\004\012\212\001\002\000\020\005\uffcc\012\uffcc\027\uffcc" +
    "\040\uffcc\046\uffcc\050\uffcc\051\uffcc\001\002\000\022\011" +
    "\032\020\020\021\037\022\023\023\035\025\027\044\046" +
    "\047\033\001\002\000\004\027\215\001\002\000\022\005" +
    "\uffef\012\uffef\013\uffef\027\uffef\040\uffef\046\uffef\050\uffef" +
    "\051\uffef\001\002\000\006\012\213\027\uffed\001\002\000" +
    "\004\027\uffee\001\002\000\004\011\057\001\002\000\006" +
    "\005\uffe3\037\224\001\002\000\006\005\uffe2\037\uffe2\001" +
    "\002\000\004\005\227\001\002\000\004\011\057\001\002" +
    "\000\006\005\uffe3\037\224\001\002\000\004\005\uffe4\001" +
    "\002\000\020\005\uffe5\012\uffe5\027\uffe5\040\uffe5\046\uffe5" +
    "\050\uffe5\051\uffe5\001\002\000\006\015\015\020\ufff3\001" +
    "\002\000\004\020\ufff4\001\002\000\004\012\233\001\002" +
    "\000\006\014\011\020\ufffc\001\002\000\004\012\ufff2\001" +
    "\002\000\004\020\020\001\002\000\004\012\ufff1\001\002" +
    "\000\010\016\ufff7\017\ufff7\037\247\001\002\000\004\012" +
    "\241\001\002\000\010\011\237\015\ufffa\020\ufffa\001\002" +
    "\000\004\012\244\001\002\000\006\015\ufffd\020\ufffd\001" +
    "\002\000\010\011\237\015\ufffa\020\ufffa\001\002\000\006" +
    "\015\ufffb\020\ufffb\001\002\000\006\016\252\017\254\001" +
    "\002\000\004\011\250\001\002\000\010\016\ufff7\017\ufff7" +
    "\037\247\001\002\000\006\016\ufff8\017\ufff8\001\002\000" +
    "\004\012\ufff6\001\002\000\004\012\ufff9\001\002\000\004" +
    "\012\ufff5\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\012\004\011\001\001\000\004\025\237\001\001\000" +
    "\006\006\015\051\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\021\010\020\001\001\000\040\010\035\011\024\012\047" +
    "\013\023\014\033\015\043\016\041\017\042\022\025\023" +
    "\030\026\037\036\040\043\044\044\027\045\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\213\001\001\000\002\001\001" +
    "\000\016\020\206\024\074\040\075\042\071\043\065\044" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\024\142\033\141\040\075\042\071\043" +
    "\137\044\027\001\001\000\002\001\001\000\016\020\131" +
    "\024\074\040\075\042\071\043\065\044\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\055\030\057\043" +
    "\044\044\027\001\001\000\002\001\001\000\040\010\035" +
    "\011\053\012\047\013\023\014\033\015\043\016\041\017" +
    "\042\022\025\023\030\026\037\036\040\043\044\044\027" +
    "\045\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\020\073\024\074\031\064\040\075\042\071\043\065\044" +
    "\027\001\001\000\002\001\001\000\014\024\116\040\075" +
    "\042\071\043\065\044\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\020\110\024\074\040\075\042\071\043\065\044\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\103\001\001\000\002\001" +
    "\001\000\016\020\077\024\074\040\075\042\071\043\065" +
    "\044\027\001\001\000\002\001\001\000\014\024\107\040" +
    "\075\042\071\043\065\044\027\001\001\000\014\024\106" +
    "\040\075\042\071\043\065\044\027\001\001\000\002\001" +
    "\001\000\014\024\105\040\075\042\071\043\065\044\027" +
    "\001\001\000\002\001\001\000\004\046\103\001\001\000" +
    "\004\046\103\001\001\000\004\046\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\012\113\014\033\015" +
    "\043\016\041\017\042\032\114\043\044\044\027\045\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\103\001\001\000\016\020\120\024\074" +
    "\040\075\042\071\043\065\044\027\001\001\000\002\001" +
    "\001\000\020\020\122\021\123\024\074\040\075\042\071" +
    "\043\065\044\027\001\001\000\002\001\001\000\004\052" +
    "\124\001\001\000\002\001\001\000\020\020\122\021\126" +
    "\024\074\040\075\042\071\043\065\044\027\001\001\000" +
    "\004\052\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\010\035\011\133\012\047\013" +
    "\023\014\033\015\043\016\041\017\042\022\025\023\030" +
    "\026\037\036\040\043\044\044\027\045\046\001\001\000" +
    "\002\001\001\000\040\010\035\011\135\012\047\013\023" +
    "\014\033\015\043\016\041\017\042\022\025\023\030\026" +
    "\037\036\040\043\044\044\027\045\046\001\001\000\002" +
    "\001\001\000\014\024\205\040\075\042\071\043\065\044" +
    "\027\001\001\000\002\001\001\000\016\020\203\024\074" +
    "\040\075\042\071\043\065\044\027\001\001\000\002\001" +
    "\001\000\004\046\147\001\001\000\016\020\144\024\074" +
    "\040\075\042\071\043\065\044\027\001\001\000\002\001" +
    "\001\000\014\024\152\040\075\042\071\043\065\044\027" +
    "\001\001\000\014\024\151\040\075\042\071\043\065\044" +
    "\027\001\001\000\014\024\150\040\075\042\071\043\065" +
    "\044\027\001\001\000\004\046\103\001\001\000\004\046" +
    "\103\001\001\000\004\046\103\001\001\000\006\034\154" +
    "\056\155\001\001\000\006\034\154\056\202\001\001\000" +
    "\004\035\174\001\001\000\006\040\167\042\071\001\001" +
    "\000\006\040\160\042\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\010\035\011\163\012\047\013\023" +
    "\014\033\015\043\016\041\017\042\022\025\023\030\026" +
    "\037\036\040\043\044\044\027\045\046\001\001\000\004" +
    "\037\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\010\035\011\171" +
    "\012\047\013\023\014\033\015\043\016\041\017\042\022" +
    "\025\023\030\026\037\036\040\043\044\044\027\045\046" +
    "\001\001\000\004\037\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\010\035\011\200\012\047\013\023\014" +
    "\033\015\043\016\041\017\042\022\025\023\030\026\037" +
    "\036\040\043\044\044\027\045\046\001\001\000\004\037" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\103\001\001\000" +
    "\002\001\001\000\040\010\035\011\210\012\047\013\023" +
    "\014\033\015\043\016\041\017\042\022\025\023\030\026" +
    "\037\036\040\043\044\044\027\045\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\010\035\011\215\012" +
    "\047\013\023\014\033\015\043\016\041\017\042\022\025" +
    "\023\030\026\037\036\040\043\044\044\027\045\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\216" +
    "\001\001\000\002\001\001\000\010\041\220\043\221\044" +
    "\027\001\001\000\004\055\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\041\224\043\221\044\027\001" +
    "\001\000\004\055\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\015\051\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\234\007\233\001\001" +
    "\000\002\001\001\000\006\005\235\010\020\001\001\000" +
    "\002\001\001\000\004\053\245\001\001\000\002\001\001" +
    "\000\006\025\241\054\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\241\054\244\001\001\000\002" +
    "\001\001\000\004\047\252\001\001\000\002\001\001\000" +
    "\004\053\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
/* s.init();*/ 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Scanner s;
    parser(Scanner s, String k){ this.s=s; }

   public VisitableNode<Node> makeNode(String name, VisitableNode<Node> ... childrens){
            Node node = new Node(name);
            VisitableNode<Node> toReturn = new VisitableNode<Node>(node);
           for(int i = 0; i < childrens.length; i ++){
               toReturn.add(childrens[i]);
           }
           return toReturn;
       }

     public VisitableNode<Node> makeNode(String name, ArrayList<VisitableNode<Node>> childrens){

                Node node = new Node(name);
                VisitableNode<Node> toReturn = new VisitableNode<Node>(node);

                for (VisitableNode<Node> nodeChild : childrens)
                   toReturn.add(nodeChild);

               return toReturn;
           }

            public void syntax_error(Symbol cur_token){
            //recupera riga e colonna dell'errore
            int row = cur_token.left+1;
            int col = cur_token.right;
           System.out.println("L'errore si trova in riga "+ row +" e in colonna "+col+".");
             }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program_n ::= PROGRAM IDENTIFIER INSTRUCTION_SEPARATOR block END_PROGRAM 
            {
              VisitableNode<Node> RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String attr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<Node> ptr = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                       VisitableNode<Node> id_node = makeNode(Constant.ID_NODE, makeNode(attr));
                                        RESULT= makeNode(Constant.PROGRAM_NODE, id_node, ptr);
                                        SyntaxVisitor visitor = new SyntaxVisitor();
                                        visitor.visit(RESULT);
                                        visitor.saveFileXML();
                                        System.out.println(RESULT);
                                        System.out.println("Albero costruito correttamente, vedi file.xml");


              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_n",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program_n EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<Node> start_val = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_n ::= error 
            {
              VisitableNode<Node> RESULT =null;
		System.out.println("L'albero non può esser costruito poichè è presente un errore");
        System.exit(0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_n",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= variable_declaration_part procedure_declaration_part statement_part 
            {
              VisitableNode<Node> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nodes2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodes2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisitableNode<Node>> nodes2 = (ArrayList<VisitableNode<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node3 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                 ArrayList<VisitableNode<Node>> child = new ArrayList<VisitableNode<Node>>();
                                                 if(node1 != null) child.add(node1);
                                                 if(nodes2 !=null){
                                                    VisitableNode<Node> proc_node = makeNode(Constant.PROC_DECL_PART, nodes2);
                                                    child.add(proc_node);
                                                 }
                                                 child.add(node3);
                                                 RESULT = makeNode(Constant.BLOCK_OP,child);

                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // variable_declaration_part ::= VAR variable_declaration INSTRUCTION_SEPARATOR variables 
            {
              VisitableNode<Node> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<Node>> list = (ArrayList<VisitableNode<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                         if(list!=null){
                                          list.add(0,node1);
                                          RESULT = makeNode(Constant.VAR_DECL_PART_NODE,list);}
                                          else {
                                         RESULT = makeNode(Constant.VAR_DECL_PART_NODE,node1);}




              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variable_declaration_part ::= 
            {
              VisitableNode<Node> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variables ::= variable_declaration INSTRUCTION_SEPARATOR variables 
            {
              ArrayList<VisitableNode<Node>> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<Node>> node2 = (ArrayList<VisitableNode<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                       RESULT = new ArrayList<VisitableNode<Node>>();
                                     if(node2!=null)
                                    ((ArrayList<VisitableNode<Node>>) RESULT).addAll(node2);
                                     ((ArrayList<VisitableNode<Node>>) RESULT).add(0,node1);



              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variables ::= 
            {
              ArrayList<VisitableNode<Node>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable_declaration ::= IDENTIFIER identifiers simple_type 
            {
              VisitableNode<Node> RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String attr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptr_stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptr_stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisitableNode<Node>> ptr_sts = (ArrayList<VisitableNode<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                         VisitableNode<Node>  var = makeNode(attr);
                                          var.data().setIdentifier(true);
                                          VisitableNode<Node> id_node = makeNode(Constant.ID_NODE, var);

                                         if(ptr_sts!=null){
                                         ptr_sts.add(0,makeNode(type));
                                         ptr_sts.add(1,id_node);
                                         RESULT = makeNode(Constant.VAR_DECL_NODE,ptr_sts);
                                         }
                                         else {
                                          RESULT = makeNode(Constant.VAR_DECL_NODE, makeNode(type), id_node);
                                         }


              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // identifiers ::= SEPARATOR IDENTIFIER identifiers 
            {
              ArrayList<VisitableNode<Node>> RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String attr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<Node>> node1 = (ArrayList<VisitableNode<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                    RESULT = new ArrayList<VisitableNode<Node>>();
                                    VisitableNode<Node> var = makeNode(attr);
                                    var.data().setIdentifier(true);
                                    VisitableNode<Node> id_node = makeNode(Constant.ID_NODE, var);
                                    ((ArrayList<VisitableNode<Node>>) RESULT).add(id_node);
                                     if(node1!=null)
                                                                        ((ArrayList<VisitableNode<Node>>) RESULT).addAll(node1);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // identifiers ::= 
            {
              ArrayList<VisitableNode<Node>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simple_type ::= INTEGER 
            {
              String RESULT =null;
		 RESULT = "integer"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simple_type ::= BOOLEAN 
            {
              String RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_type",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // procedure_declaration_part ::= procedure_declaration INSTRUCTION_SEPARATOR procedure_declaration_part 
            {
              ArrayList<VisitableNode<Node>> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<Node>> node2 = (ArrayList<VisitableNode<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                                       RESULT = new ArrayList<VisitableNode<Node>>();
                                            ((ArrayList<VisitableNode<Node>>) RESULT).add(node1);
                                                if(node2!=null)
                                                                                        ((ArrayList<VisitableNode<Node>>) RESULT).addAll(node2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_part",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // procedure_declaration_part ::= 
            {
              ArrayList<VisitableNode<Node>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_part",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // procedure_declaration ::= PROCEDURE IDENTIFIER INSTRUCTION_SEPARATOR simple_block 
            {
              VisitableNode<Node> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                    VisitableNode<Node> var = makeNode(value);
                                    var.data().setIdentifier(true);
                                    VisitableNode<Node> id_node = makeNode(Constant.ID_NODE, var);
                                                      RESULT = makeNode(Constant.PROC_NODE, id_node, node); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simple_block ::= variable_declaration_part statement_part 
            {
              VisitableNode<Node> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node2 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.SIMPLE_BLOCK_NODE, node1, node2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_block",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement_part ::= compound_statement 
            {
              VisitableNode<Node> RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_part",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // compound_statement ::= BEGIN statement statements END 
            {
              VisitableNode<Node> RESULT =null;
		int ptr_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptr_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<Node> ptr_st = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptr_stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptr_stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisitableNode<Node>> ptr_sts = (ArrayList<VisitableNode<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                    if(ptr_sts!=null){
                                                          ptr_sts.add(0,ptr_st);
                                                          RESULT = makeNode(Constant.COMP_NODE, ptr_sts);}
                                                         else
                                                            RESULT = makeNode(Constant.COMP_NODE, ptr_st);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statements ::= INSTRUCTION_SEPARATOR statement statements 
            {
              ArrayList<VisitableNode<Node>> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<Node>> node2 = (ArrayList<VisitableNode<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        RESULT = new ArrayList<VisitableNode<Node>>();

                                        ((ArrayList<VisitableNode<Node>>) RESULT).add(node1);
                                          if(node2!=null)
                                                                                ((ArrayList<VisitableNode<Node>>) RESULT).addAll(node2);
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statements ::= 
            {
              ArrayList<VisitableNode<Node>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= simple_statement 
            {
              VisitableNode<Node> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> ptr = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ptr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= structured_statement 
            {
              VisitableNode<Node> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> ptr = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ptr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // simple_statement ::= assignment_statement 
            {
              VisitableNode<Node> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> ptr = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ptr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // simple_statement ::= read_statement 
            {
              VisitableNode<Node> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> ptr = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ptr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // simple_statement ::= procedure_statement 
            {
              VisitableNode<Node> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> ptr = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ptr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // simple_statement ::= write_statement 
            {
              VisitableNode<Node> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> ptr = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ptr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assignment_statement ::= variable ASSIGN expression 
            {
              VisitableNode<Node> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VisitableNode<Node> id_node = makeNode(Constant.ID_NODE, makeNode(value));
                                            RESULT = makeNode(Constant.ASSIGN_OP, id_node, node);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // read_statement ::= READ LPAR input_variable read_variables RPAR 
            {
              VisitableNode<Node> RESULT =null;
		int ptr_stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptr_stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ptr_st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptr_stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptr_stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisitableNode<Node>> ptr_sts = (ArrayList<VisitableNode<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                        if(ptr_sts!=null){
                                        ((ArrayList<VisitableNode<Node>>)ptr_sts).add(0,makeNode(Constant.ID_NODE, makeNode(ptr_st)));
                                        RESULT = makeNode(Constant.READ_NODE, ptr_sts);}
                                        else
                                    RESULT = makeNode(Constant.READ_NODE, makeNode(Constant.ID_NODE, makeNode(ptr_st)));


                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // read_variables ::= SEPARATOR input_variable read_variables 
            {
              ArrayList<VisitableNode<Node>> RESULT =null;
		int ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ptr1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ptr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<Node>> ptr2 = (ArrayList<VisitableNode<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                RESULT = new ArrayList<VisitableNode<Node>>();

                                                ((ArrayList<VisitableNode<Node>>) RESULT).add(0,makeNode(Constant.ID_NODE,makeNode(ptr1)));
                                                 if(ptr2!=null)
                                                                                                ((ArrayList<VisitableNode<Node>>) RESULT).addAll(ptr2);
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_variables",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // read_variables ::= 
            {
              ArrayList<VisitableNode<Node>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_variables",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // input_variable ::= variable 
            {
              String RESULT =null;
		int ptr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ptr1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = ptr1;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("input_variable",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procedure_statement ::= procedure_identifier 
            {
              VisitableNode<Node> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VisitableNode<Node> id_node = makeNode(Constant.ID_NODE, makeNode(value));
                                        RESULT = makeNode(Constant.CALL_OP_NODE, id_node); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procedure_identifier ::= IDENTIFIER 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_identifier",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // write_statement ::= WRITE LPAR output_value output_values RPAR 
            {
              VisitableNode<Node> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VisitableNode<Node>> node2 = (ArrayList<VisitableNode<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                    if(node2 != null){
                                                     node2.add(0,node1);
                                                     RESULT = makeNode(Constant.WRITE_NODE, node2);

                                                     }
                                                     else
                                                     RESULT = makeNode(Constant.WRITE_NODE, node1);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // output_values ::= SEPARATOR output_value output_values 
            {
              ArrayList<VisitableNode<Node>> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<Node>> node2 = (ArrayList<VisitableNode<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        RESULT = new ArrayList<VisitableNode<Node>>();

                                            ((ArrayList<VisitableNode<Node>>) RESULT).add(0,node1);
                                             if(node2!=null)

                                                                                        ((ArrayList<VisitableNode<Node>>) RESULT).addAll(node2);

                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_values",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // output_values ::= 
            {
              ArrayList<VisitableNode<Node>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_values",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // output_value ::= expression 
            {
              VisitableNode<Node> RESULT =null;
		int ptrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> ptr = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ptr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("output_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // structured_statement ::= compound_statement 
            {
              VisitableNode<Node> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> v = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // structured_statement ::= if_statement 
            {
              VisitableNode<Node> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> v = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // structured_statement ::= while_statement 
            {
              VisitableNode<Node> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> v = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // structured_statement ::= for_statement 
            {
              VisitableNode<Node> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> v = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // structured_statement ::= switch_statement 
            {
              VisitableNode<Node> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> v = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structured_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // for_statement ::= FOR for_expression DO statement INSTRUCTION_SEPARATOR 
            {
              VisitableNode<Node> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<Node> node2 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            if(node1 !=null)
                            RESULT = makeNode(Constant.FOR_NODE,node1,node2);
                             else
                             RESULT = makeNode(Constant.FOR_NODE,node2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // for_expression ::= LPAR for_assignment INSTRUCTION_SEPARATOR for_inner_expression INSTRUCTION_SEPARATOR for_simple_statement RPAR 
            {
              VisitableNode<Node> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VisitableNode<Node> node2 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int node3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int node3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<Node> node3 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                    ArrayList<VisitableNode<Node>> child = new ArrayList<VisitableNode<Node>>();

                                     if(node1!= null) child.add(node1);
                                     if(node2!= null) child.add(node2);
                                     if(node3!= null) child.add(node3);
                                     if(!child.isEmpty())
                                     RESULT = makeNode(Constant.FOR_EXPR_NODE,child);
                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // for_assignment ::= assignment_statement 
            {
              VisitableNode<Node> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> value = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.FOR_ASSIGNMENT, value);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_assignment",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // for_assignment ::= 
            {
              VisitableNode<Node> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_assignment",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // for_inner_expression ::= expression 
            {
              VisitableNode<Node> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> value = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.FOR_INNER_EXPRESSION, value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_inner_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // for_inner_expression ::= 
            {
              VisitableNode<Node> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_inner_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // for_simple_statement ::= simple_statement 
            {
              VisitableNode<Node> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> value = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.FOR_SIMPLE_STATEMENT, value);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_simple_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // for_simple_statement ::= 
            {
              VisitableNode<Node> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_simple_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if_statement ::= IF expression THEN statement 
            {
              VisitableNode<Node> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node2 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.IF_THEN_NODE, node1, node2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // if_statement ::= IF expression THEN statement ELSE statement 
            {
              VisitableNode<Node> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<Node> node2 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int node3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node3 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.IF_THEN_ELSE_NODE, node1, node2, node3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // while_statement ::= WHILE expression DO statement INSTRUCTION_SEPARATOR 
            {
              VisitableNode<Node> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<Node> node2 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = makeNode(Constant.WHILE_NODE, node1, node2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // switch_statement ::= SWITCH switch_expression BEGIN case_statements default_statement END INSTRUCTION_SEPARATOR 
            {
              VisitableNode<Node> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nodesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nodesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<VisitableNode<Node>> nodes = (ArrayList<VisitableNode<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<Node> node2 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                            nodes.add(0,node1);
                                            if(node2!=null)
                                            nodes.add(node2);
                                    RESULT = makeNode(Constant.SWITCH_NODE,nodes);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // switch_expression ::= simple_expression adding_operator simple_expression 
            {
              VisitableNode<Node> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node2 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VisitableNode<Node> add_node = makeNode(Constant.ADD_NODE, makeNode(value));
                                                 RESULT = makeNode(Constant.ADD_OP, add_node, node1, node2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // switch_expression ::= simple_expression MULT_OPERATOR simple_expression 
            {
              VisitableNode<Node> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node2 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VisitableNode<Node> mul_node = makeNode(Constant.MUL_NODE, makeNode(value));
                                                                      RESULT = makeNode(Constant.MUL_OP, mul_node, node1, node2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // switch_expression ::= variable 
            {
              VisitableNode<Node> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  VisitableNode<Node> id_node = makeNode(Constant.ID_NODE, makeNode(value));
                                                                    RESULT = makeNode(Constant.VAR_NODE, id_node); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // switch_expression ::= LPAR expression RPAR 
            {
              VisitableNode<Node> RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<Node> node = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeNode(Constant.EXPR_NODE, node); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // switch_expression ::= NOT expression 
            {
              VisitableNode<Node> RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.NOT_NODE, node); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // switch_expression ::= MINUS simple_expression 
            {
              VisitableNode<Node> RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.UNARY_MINUS_NODE, node); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // switch_expression ::= simple_expression RELOP simple_expression 
            {
              VisitableNode<Node> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node2 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VisitableNode<Node> rel_node = makeNode(Constant.REL_NODE, makeNode(value));
                                                                 RESULT = makeNode(Constant.REL_OP,rel_node, node1, node2);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // case_statements ::= case_statement case_statements 
            {
              ArrayList<VisitableNode<Node>> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VisitableNode<Node>> node2 = (ArrayList<VisitableNode<Node>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                    RESULT = new ArrayList<VisitableNode<Node>>();
                                                       ((ArrayList<VisitableNode<Node>>) RESULT).add(0,node1);
                                                       if(node2!=null)
                                                            ((ArrayList<VisitableNode<Node>>) RESULT).addAll(node2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statements",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // case_statements ::= 
            {
              ArrayList<VisitableNode<Node>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statements",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // case_statement ::= CASE constant COLON statement break 
            {
              VisitableNode<Node> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node2 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      VisitableNode<Node> constant_node = makeNode(Constant.CONST_NODE, makeNode(Constant.CONSTANT_NODE, makeNode(value)));
                      RESULT = makeNode(Constant.CASE_NODE,constant_node,node1,node2);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // case_statement ::= RPAR constant LPAR COLON statement break 
            {
              VisitableNode<Node> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node2 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		VisitableNode<Node> constant_node = makeNode(Constant.CONST_NODE, makeNode(Constant.CONSTANT_NODE, makeNode(value)));
                                           RESULT = makeNode(Constant.CASE_NODE,constant_node,node1,node2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // break ::= BREAK INSTRUCTION_SEPARATOR 
            {
              VisitableNode<Node> RESULT =null;
		 RESULT = makeNode(Constant.BREAK_NODE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // break ::= 
            {
              VisitableNode<Node> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // default_statement ::= DEFAULT COLON statement break 
            {
              VisitableNode<Node> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node2 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.DEFAULT_NODE,node1,node2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_statement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // default_statement ::= 
            {
              VisitableNode<Node> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_statement",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= simple_expression 
            {
              VisitableNode<Node> RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.SIMPLE_NODE, node);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= simple_expression RELOP simple_expression 
            {
              VisitableNode<Node> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node2 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VisitableNode<Node> rel_node = makeNode(Constant.REL_NODE, makeNode(value));
                     RESULT = makeNode(Constant.REL_OP,rel_node, node1, node2);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // simple_expression ::= simple_expression adding_operator simple_expression 
            {
              VisitableNode<Node> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node2 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VisitableNode<Node> add_node = makeNode(Constant.ADD_NODE, makeNode(value));
                             RESULT = makeNode(Constant.ADD_OP, add_node, node1, node2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // simple_expression ::= simple_expression MULT_OPERATOR simple_expression 
            {
              VisitableNode<Node> RESULT =null;
		int node1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int node1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VisitableNode<Node> node1 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int node2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int node2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node2 = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VisitableNode<Node> mul_node = makeNode(Constant.MUL_NODE, makeNode(value));
                                                  RESULT = makeNode(Constant.MUL_OP, mul_node, node1, node2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simple_expression ::= variable 
            {
              VisitableNode<Node> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  VisitableNode<Node> id_node = makeNode(Constant.ID_NODE, makeNode(value));
                                                RESULT = makeNode(Constant.VAR_NODE, id_node); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simple_expression ::= constant 
            {
              VisitableNode<Node> RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 VisitableNode<Node> constant_node = makeNode(Constant.CONSTANT_NODE, makeNode(value));
                                            RESULT = makeNode(Constant.CONST_NODE, constant_node);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simple_expression ::= LPAR expression RPAR 
            {
              VisitableNode<Node> RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VisitableNode<Node> node = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeNode(Constant.EXPR_NODE, node); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simple_expression ::= NOT expression 
            {
              VisitableNode<Node> RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.NOT_NODE, node); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simple_expression ::= MINUS simple_expression 
            {
              VisitableNode<Node> RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VisitableNode<Node> node = (VisitableNode<Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(Constant.UNARY_MINUS_NODE, node); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // adding_operator ::= ADD_OPERATOR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adding_operator",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // adding_operator ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "minus"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adding_operator",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // variable ::= variable_identifier 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // variable_identifier ::= IDENTIFIER 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_identifier",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // constant ::= INTEGER_CONSTANT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // constant ::= CHARACTER_CONSTANT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= v ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // constant ::= STRING_CONSTANT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= v ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // constant ::= constant_identifier 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= value ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // constant_identifier ::= TRUE 
            {
              String RESULT =null;
		 RESULT= "true"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_identifier",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // constant_identifier ::= FALSE 
            {
              String RESULT =null;
		 RESULT= "false"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_identifier",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
